version: "3.8"
networks:
  kafka_network:
    driver: bridge
services:
  db:
    image: mongo:latest
    container_name: db
    networks:
      - kafka_network
    restart: always
    volumes:
      - ./database/pedidos:/data/db
    ports:
      - ${DB_PORT}:27017
    environment:
      MONGO_INITDB_DATABASE: ${DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS}
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka_network
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-1.1.0
    container_name: kafka
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      # KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "pagamentos:1:1"
    volumes:
      - ./kafka:/var/run/docker.sock
  api_pagamentos:
    image: node/pnpm
    container_name: api_pagamentos
    networks:
      - kafka_network
    restart: always
    depends_on:
      - db
      - zookeeper
      - kafka
    ports:
      - ${PORT_PAGAMENTOS}:${PORT_PAGAMENTOS}
    volumes:
      - ./pagamentos:/usr/src/app
    working_dir: /usr/src/app
    command: npm run prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  api_pedidos:
    image: node/pnpm
    container_name: api_pedidos
    networks:
      - kafka_network
    restart: always
    depends_on:
      - db
      - zookeeper
      - kafka
    ports:
      - ${PORT_PEDIDOS}:${PORT_PEDIDOS}
    volumes:
      - ./pedidos:/usr/src/app
    working_dir: /usr/src/app
    command: npm run prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
